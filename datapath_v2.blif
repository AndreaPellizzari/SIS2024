.model datapath
.inputs primo1 primo0 secondo1 secondo0 stato manche1 manche0
.outputs primopass1 primopass0 secondopass1 secondopass0 check comparatore

# Search dei vari componenti
.search uno.blif
.search zero.blif
.search demux2out2bit.blif
.search sommatore_primo_secondo.blif
.search registro5.blif
.search multiplexer2ingressi5bit.blif
.search multiplexer2ingressi2bit.blif
.search multiplexer4ingressi2bit.blif
.search registro2.blif
.search registro.blif
.search comparatore2bit.blif
.search maggiore5bit.blif

# Componente che restituisce 1
.subckt uno o=uno

# Componente che restituisce 0
.subckt zero o=zero

# Reg "02" stato
.subckt registro a=stato o=regstato 

# Demux '0', instradamento di primo in base allo stato
.subckt demux1-2 a1=primo1 a0=primo0 s=regstato x1=x1demux0 x0=x0demux0 y1=y1demux0 y0=y0demux0

# Demux '1', instradamento di secondo in base allo stato
.subckt demux1-2 a1=secondo1 a0=secondo0 s=regstato x1=x1demux1 x0=x0demux1 y1=y1demux1 y0=y0demux1

# Sommatore Primo e Secondo, '0' prende gli ingressi x*
.subckt sommatore_primo_secondo k1=x1demux0 k0=x0demux0 j1=x1demux1 j0=x0demux1 x4=4sum0 x3=3sum0 x2=2sum0 x1=1sum0 x0=0sum0

# Mux '0', sceglie come popolare in base allo stato il registro MaxP.
.subckt multiplexer2ingressi5bit s=regstato a4=4reg0 a3=3reg0 a2=2reg0 a1=1reg0 a0=0reg0 b4=4sum0 b3=3sum0 b2=2sum0 b1=1sum0 b0=0sum0 o4=4mux0 o3=3mux0 o2=2mux0 o1=1mux0 o0=0mux0

# Reg '0', registro a 5 bit che memorizzerà MaxP, prende come ingresso *sum0.
.subckt registro5 a4=4mux0 a3=3mux0 a2=2mux0 a1=1mux0 a0=0mux0 o4=4reg0 o3=3reg0 o2=2reg0 o1=1reg0 o0=0reg0

## Istanza Registro 'ultimo vincitore'
# Mux '1', popola ultimo vincitore in base allo stato
.subckt multiplexer2ingressi2bit s=regstato a1=manche1 a0=manche0 b1=zero b0=zero o1=1mux1 o0=0mux1 

# Reg '1', registro 2 bit memorizza 'Ultimo vincitore', popolato da *mux1.
.subckt registro2 a1=1mux1 a0=0mux1 o1=1reg1 o0=0reg1

# Reg '11', memorizza lastmossa primo
.subckt registro2 a1=y1demux1 a0=y1demux0 o1=1reg11 o0=0reg11


# Reg '12', memorizza lastmossa secondo
.subckt registro2 a1=y1demux1 a0=y1demux1 o1=1reg12 o0=0reg12

## Istanza Registro 'ultima mossa'
# Mux '2', Sceglie con che mossa popolare il registro 'ultima mossa'
.subckt multiplexer4ingressi2bit s1=manche1 s0=manche0 a1=zero a0=zero b1=1reg11 b0=0reg11 c1=1reg12 c0=0reg12 d1=1reg2 d0=0reg2 o1=1mux2 o0=0mux2

# Mux '3' Sceglie se resettare o meno il registro 'ultima mossa'.
.subckt multiplexer2ingressi2bit s=regstato a1=1mux2 a0=0mux2 b1=zero b0=zero o1=1mux3 o0=0mux3

# Registro '2', registro a 2 bit per memorizzare 'ultima mossa'
.subckt registro2 a1=1mux3 a0=0mux3 o1=1reg2 o0=0reg2

# Mux '4', prende in input primo e secondo, in base alla vittoria dell'ultimo giocatore decide cosa far passare
.subckt multiplexer4ingressi2bit s1=1reg1 s0=0reg1 b1=y1demux0 b0=y0demux0 c1=y0demux1 c0=y0demux1 a1=uno a0=uno d1=uno d0=uno o1=1mux4 o0=0mux4

# Comparatore '0', compara l'ultima mossa vincente con quella attuale del vincitore precedente.
.subckt comparatore2bit a1=1mux4 a0=0mux4 b1=1reg2 b0=0reg2 O=comparatore

# Mux '5', Imposta a 00 primo se la mossa è invalida
.subckt multiplexer2ingressi2bit s=comparatore a1=zero a0=zero b1=primo1 b0=primo0 o1=1mux5 o0=0mux5

# Mux '6', decide il popolamento del registro 'I', contatore delle partite
.subckt multiplexer2ingressi5bit s=regstato a4=4mux7 a3=3mux7 a2=2mux7 a1=1mux7 a0=0mux7 b4=zero b3=zero b2=zero b1=zero b0=uno o4=4mux6 o3=3mux6 o2=2mux6 o1=1mux6 o0=0mux6

# Registro '3', registro a 5 bit che memorizza I, conterà il numero di partita
.subckt registro5 a4=4mux6 a3=3mux6 a2=2mux6 a1=1mux6 a0=0mux6 o4=4reg3 o3=3reg3 o2=2reg3 o1=1reg3 o0=0reg3

# Sommatore '1', se la mossa è valida, incrementa la I.
.subckt somma5bit a4=4reg3 a3=3reg3 a2=2reg3 a1=1reg3 a0=0reg3 b4=zero b3=zero b2=zero b1=zero b0=uno cout=cout4 s4=4sum1 s3=3sum1 s2=2sum1 s1=1sum1 s0=0sum1

# Mux '7', sceglie se tenere la i incrementata oppure quella non incrementata
.subckt multiplexer2ingressi5bit s=comparatore a4=4reg3 a3=3reg3 a2=2reg3 a1=1reg3 a0=0reg3 b4=4sum1 b3=3sum1 b2=2sum1 b1=1sum1 b0=0sum1 o4=4mux7 o3=3mux7 o2=2mux7 o1=1mux7 o0=0mux7

# > '0', confronta il numero nelle partite con quello delle partite massime
.subckt 6gt a4=4reg3 a3=3reg3 a2=2reg3 a1=1reg3 a0=0reg3 b4=4reg0 b3=3reg0 b2=2reg0 b1=1reg0 b0=0reg0 agtb=0magg

# > '1', confronta il numero di partite con 3 binario
.subckt 6gt a4=4reg3 a3=3reg3 a2=2reg3 a1=1reg3 a0=0reg3 b4=zero b3=zero b2=zero b1=uno b0=uno agtb=check 

# Mux '8', se il numero di partite è > di quelle massime, primo impostato a 00
.subckt multiplexer2ingressi2bit s=0magg a1=zero a0=zero b1=1mux5 b0=0mux5 o1=primopass1 o0=primopass0

# Mux '8', se il numero di partite è > di quelle massime, secondo impostato a 00
.subckt multiplexer2ingressi2bit s=0magg a1=zero a0=zero b1=secondo1 b0=secondo0 o1=secondopass1 o0=secondopass0

.end
